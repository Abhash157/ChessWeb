(()=>{function e(e,o){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,r,a,l,c=[],i=!0,s=!1;try{if(a=(o=o.call(e)).next,0===n){if(Object(o)!==o)return;i=!1}else for(;!(i=(t=a.call(o)).done)&&(c.push(t.value),c.length!==n);i=!0);}catch(e){s=!0,r=e}finally{try{if(!i&&null!=o.return&&(l=o.return(),Object(l)!==l))return}finally{if(s)throw r}}return c}}(e,o)||function(e,o){if(e){if("string"==typeof e)return n(e,o);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(e,o):void 0}}(e,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}function o(){return localStorage.getItem("chessServerUrl")||"http://localhost:3000"}var t={socket:null,roomId:null,playerId:null,isHost:!1,playerColor:null,opponentConnected:!1,waitingForOpponent:!1,gameStarted:!1,lastReceivedMove:null,playerName:"Player",opponentName:"Opponent",onlineModeActive:!1};function r(n){try{var r=n||o();return console.log("Connecting to WebSocket server at ".concat(r,"...")),p("Connecting to server at ".concat(r,"...")),n&&localStorage.setItem("chessServerUrl",n),t.socket=io(r,{transports:["websocket","polling"],reconnectionAttempts:5,timeout:2e4,reconnectionDelay:1e3,reconnectionDelayMax:5e3}),function(){if(!t.socket)return;t.socket.on("connect",(function(){console.log("Connected to Socket.IO server with ID:",t.socket.id),t.playerId=t.socket.id,t.onlineModeActive=!0})),t.socket.on("disconnect",(function(){console.log("Disconnected from Socket.IO server"),u("Disconnected from server")})),t.socket.on("connect_error",(function(e){console.error("Socket connection error:",e),u("Connection error: "+e.message);var n=document.getElementById("mp-status");n&&(n.innerHTML+='\n        <div class="warning-message" style="margin-top: 15px;">\n          <p>Having trouble connecting? Your browser might be blocking WebSockets.</p>\n          <p>You can:</p>\n          <ul style="text-align: left; margin-left: 20px;">\n            <li>Check your server address in Server Settings</li>\n            <li>Make sure both devices are on the same network</li>\n            <li>Disable ad blockers for this page</li>\n            <li>Try a different browser</li>\n            <li>Use the local multiplayer option below</li>\n          </ul>\n          <button id="mp-local-fallback" class="mp-btn">Use Local Multiplayer</button>\n        </div>\n      ',document.getElementById("mp-local-fallback").addEventListener("click",(function(){useLocalMultiplayerFallback()})))})),t.socket.on("opponent_joined",(function(e){console.log("Opponent joined:",e),function(e){t.opponentConnected=!0,t.waitingForOpponent=!1,t.opponentName=e.name||"Opponent",console.log("Opponent joined:",e),p("".concat(t.opponentName," has joined the game!"));var n=document.getElementById("mp-overlay");n&&(n.style.display="none");setTimeout(c,1500)}(e)})),window.useLocalMultiplayerFallback=function(){if(console.log("Switching to local multiplayer fallback"),t.socket&&(t.socket.disconnect(),t.socket=null),t.roomId=null,t.playerId=null,t.isHost=!1,t.playerColor=null,t.opponentConnected=!1,t.waitingForOpponent=!1,t.gameStarted=!1,t.onlineModeActive=!1,window.LMP)initLocalMultiplayer();else{var e=document.createElement("script");e.src="js/localMultiplayer.js",e.onload=function(){console.log("Local multiplayer script loaded"),initLocalMultiplayer()},e.onerror=function(e){console.error("Error loading local multiplayer script:",e),u("Failed to load local multiplayer functionality")},document.head.appendChild(e)}},t.socket.on("opponent_move",(function(n){console.log("Received opponent_move event from server:",n),t.gameStarted||(console.log("Game not marked as started, but move received - forcing game start"),t.gameStarted=!0,t.onlineModeActive=!0,window.currentGameMode=window.GAME_MODE?window.GAME_MODE.ONLINE:"online",console.log("Forced game mode to:",window.currentGameMode),0===document.querySelectorAll("#chessboard .square").length&&(console.log("Board not initialized, initializing now"),d())),function(n){if(!t.gameStarted)return void console.error("Received opponent move but game not started!");console.log("Received move from opponent:",n);try{var o=e(n.split(","),5),r=o[0],a=o[1],l=o[2],c=o[3],d=o[4],m={piece:r,from:{row:parseInt(a),col:parseInt(l)},to:{row:parseInt(c),col:parseInt(d)}};console.log("Parsed opponent move:",m),t.lastReceivedMove=m;var u=document.getElementById("chessboard");if(!u)return void console.error("Chessboard not found in DOM");var g=u.querySelector('.square[data-row="'.concat(a,'"][data-col="').concat(l,'"]')),v=u.querySelector('.square[data-row="'.concat(c,'"][data-col="').concat(d,'"]'));if(console.log("Opponent move squares:",{from:g,to:v,fromCoords:"".concat(a,",").concat(l),toCoords:"".concat(c,",").concat(d)}),!g||!v)return void console.error("Could not find squares for opponent move:",{fromRow:a,fromCol:l,toRow:c,toCol:d,fromSquare:g,toSquare:v});var y=t.playerColor===PLAYER.WHITE?PLAYER.BLACK:PLAYER.WHITE;console.log("Applying opponent move directly with color: ".concat(y)),s(),window.handlePieceMove(g,v,y).then((function(){console.log("Opponent move applied successfully!"),window.turn=t.playerColor,i(),p("Your turn")})).catch((function(e){console.error("Error executing opponent move:",e),alert("Error applying opponent move. Please try reloading the page.")}))}catch(e){console.error("Error processing opponent move:",e)}}(n)})),t.socket.on("opponent_disconnected",(function(e){console.log("Opponent disconnected:",e),u(e.message||"Opponent disconnected"),t.opponentConnected=!1,t.gameStarted=!1;var n=document.getElementById("mp-status");n&&(n.innerHTML='\n        <div class="error-message">'.concat(e.message||"Opponent disconnected",'</div>\n        <button id="mp-reconnect-btn" class="mp-btn">Return to Menu</button>\n      '),document.getElementById("mp-reconnect-btn").addEventListener("click",(function(){g(),m()})))}))}(),!0}catch(e){return console.error("Error connecting to server:",e),u("Failed to connect to multiplayer server: ".concat(e.message)),!1}}function a(){t.socket&&t.socket.connected?t.socket.emit("create_room",{playerName:t.playerName},(function(e){var n,o;e.success?(console.log("Room created with ID: ".concat(e.roomId)),t.roomId=e.roomId,t.isHost=!0,t.playerColor=PLAYER.WHITE,t.waitingForOpponent=!0,p("Waiting for opponent... Room Code: ".concat(t.roomId)),n=t.roomId,(o=document.getElementById("room-code-display"))&&(o.textContent=n,o.style.display="block")):u("Failed to create room: "+(e.error||"Unknown error"))})):u("Not connected to server")}function l(e){if(t.roomId&&t.gameStarted&&t.socket){console.log("Sending move to opponent:",e);var n=e.from,o=e.to,r=e.piece,a=n.row,l=n.col,c=o.row,i=o.col,d="".concat(r,",").concat(a,",").concat(l,",").concat(c,",").concat(i);t.socket.emit("make_move",{roomId:t.roomId,move:d}),console.log("Move sent to server: ".concat(d)),window.turn=t.playerColor===PLAYER.WHITE?PLAYER.BLACK:PLAYER.WHITE,s(),p("Waiting for ".concat(t.opponentName," to make a move..."))}else console.error("Cannot send move: multiplayer not ready",{roomId:t.roomId,gameStarted:t.gameStarted,socketConnected:!!t.socket&&t.socket.connected})}function c(){console.log("Starting multiplayer game..."),"function"!=typeof handlePieceMove&&(window.handlePieceMove=window.handlePieceMove||function(e,n,o){console.log("Using fallback handlePieceMove");var t=e.textContent;return e.textContent="",n.textContent=t,!0}),t.gameStarted=!0,t.onlineModeActive=!0;var e=document.getElementById("mp-overlay");e?(console.log("Hiding multiplayer overlay"),e.style.cssText="display: none !important",setTimeout((function(){"none"===e.style.display&&null===e.offsetParent||(console.log("Overlay still visible, removing from DOM"),e.parentNode.removeChild(e))}),100)):console.log("No mpOverlay found to hide");var n=document.querySelector(".game-info");if(n){var o=document.createElement("div");o.id="in-game-mp-status",o.className="mp-game-status",o.innerHTML="<span>Online Match vs ".concat(t.opponentName,"</span>"),n.prepend(o)}if(window.currentGameMode=window.GAME_MODE.ONLINE,window.GAME_MODE&&void 0!==window.GAME_MODE.ONLINE?(console.log("Setting game mode to ONLINE using window.GAME_MODE"),window.currentGameMode=window.GAME_MODE.ONLINE):(console.log('Setting game mode to "online" as string fallback'),window.currentGameMode="online"),console.log("Current game mode set to:",window.currentGameMode),p("Game started! You are playing as ".concat(t.playerColor===PLAYER.WHITE?"White":"Black")),d(),resetClock(),startClock(),t.playerColor===PLAYER.BLACK?(s(),p("Waiting for ".concat(t.opponentName," to make a move..."))):i(),!document.getElementById("mp-game-styles")){var r=document.createElement("style");r.id="mp-game-styles",r.textContent="\n      .mp-game-status {\n        background-color: #3498db;\n        color: white;\n        padding: 8px 12px;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        font-weight: bold;\n        text-align: center;\n      }\n      \n      /* Ensure overlay is hidden */\n      #mp-overlay {\n        display: none !important;\n      }\n    ",document.head.appendChild(r)}var a=new CustomEvent("chess_game_started",{detail:{roomId:t.roomId,playerColor:t.playerColor}});window.dispatchEvent(a),localStorage.setItem("chessGameStarted_".concat(t.roomId),JSON.stringify({timestamp:(new Date).getTime(),hostId:t.isHost?t.playerId:null,joinerId:t.isHost?null:t.playerId})),console.log("Multiplayer game started successfully!")}function i(){document.querySelectorAll(".square").forEach((function(e){e.classList.remove("disabled")}))}function s(){document.querySelectorAll(".square").forEach((function(e){e.classList.add("disabled")}))}function d(){"function"==typeof createChessboard&&(createChessboard(),placePieces()),window.turn=PLAYER.WHITE,gameState.gameOver=!1,gameState.check=!1,gameState.checkmate=!1,gameState.moveHistory=[],gameState.capturedPieces={white:[],black:[]},gameState.moveCount=1,updateGameStatus(),updateCapturedPieces(),updateMoveHistory(),selectedSquare&&(selectedSquare.classList.remove("selected"),selectedSquare=null)}function m(){var e=document.getElementById("mp-overlay");if(e)e.style.display="flex";else{(e=document.createElement("div")).id="mp-overlay",e.className="mp-overlay",e.innerHTML='\n      <div class="mp-container">\n        <h2>Online Multiplayer</h2>\n        <div class="mp-options">\n          <div class="mp-option-group">\n            <label for="player-name">Your Name:</label>\n            <input type="text" id="player-name" value="Player" maxlength="15">\n          </div>\n          <div class="mp-option-group">\n            <details class="server-config">\n              <summary>Server Settings</summary>\n              <div class="server-settings-content">\n                <label for="server-address">Server Address:</label>\n                <input type="text" id="server-address" placeholder="e.g., http://192.168.1.5:3000">\n                <p class="server-help">Enter the network URL shown in your server console</p>\n                <button id="save-server-btn" class="mp-btn mp-small-btn">Save Server</button>\n              </div>\n            </details>\n          </div>\n          <button id="create-room-btn" class="mp-btn">Create New Game</button>\n          <div class="mp-divider">OR</div>\n          <div class="mp-option-group">\n            <label for="room-code">Room Code:</label>\n            <input type="text" id="room-code" placeholder="Enter room code" maxlength="10">\n          </div>\n          <button id="join-room-btn" class="mp-btn">Join Game</button>\n        </div>\n        <div id="mp-status" class="mp-status">Connect to play online</div>\n        <div id="room-code-display" class="room-code-display" style="display: none;"></div>\n        <button id="mp-cancel-btn" class="mp-btn mp-cancel-btn">Cancel</button>\n      </div>\n    ',document.body.appendChild(e),document.getElementById("player-name").addEventListener("input",(function(e){t.playerName=e.target.value||"Player"})),document.getElementById("create-room-btn").addEventListener("click",(function(){a()})),document.getElementById("join-room-btn").addEventListener("click",(function(){var e,n=document.getElementById("room-code").value;e=n,t.socket&&t.socket.connected?e?t.socket.emit("join_room",{roomId:e,playerName:t.playerName},(function(n){if(n.success){console.log("Joined room: ".concat(e)),t.roomId=e,t.isHost=!1,t.playerColor=PLAYER.BLACK,t.opponentName=n.hostName||"Host",t.opponentConnected=!0,t.gameStarted=!0,t.onlineModeActive=!0,window.GAME_MODE&&void 0!==window.GAME_MODE.ONLINE?(console.log("Setting game mode to ONLINE for joiner"),window.currentGameMode=window.GAME_MODE.ONLINE):(console.log('Setting game mode to "online" string for joiner'),window.currentGameMode="online"),p("Connected to ".concat(t.opponentName,"'s game! You are playing as Black"));var o=document.getElementById("mp-overlay");o&&(o.style.display="none"),console.log("Initializing game board for joiner"),d(),s()}else u("Failed to join room: "+(n.error||"Unknown error"))})):u("Please enter a valid room code"):u("Not connected to server")})),document.getElementById("mp-cancel-btn").addEventListener("click",(function(){g()}));var n=document.getElementById("server-address"),l=o();n.value=l,p("Ready to connect to server at ".concat(l)),document.getElementById("save-server-btn").addEventListener("click",(function(){var e=n.value.trim();if(e)try{if(!e.match(/^https?:\/\/.+/))throw new Error("Invalid URL format");localStorage.setItem("chessServerUrl",e),t.socket&&t.socket.disconnect(),p("Connecting to server at ".concat(e,"...")),setTimeout((function(){r(e)}),500)}catch(e){p("Error: ".concat(e.message,". Use format http://IP:PORT"))}}))}if(!document.getElementById("mp-styles")){var c=document.createElement("style");c.id="mp-styles",c.textContent="\n      .mp-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n      }\n      \n      .mp-container {\n        background: #1e1e2e;\n        border-radius: 10px;\n        padding: 2rem;\n        width: 90%;\n        max-width: 400px;\n        color: #cdd6f4;\n      }\n      \n      .mp-options {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        margin: 1.5rem 0;\n      }\n      \n      .mp-option-group {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n      }\n      \n      .server-config summary {\n        cursor: pointer;\n        padding: 8px;\n        background: #313244;\n        border-radius: 5px;\n        margin-bottom: 10px;\n      }\n      \n      .server-settings-content {\n        padding: 10px;\n        background: #11111b;\n        border-radius: 5px;\n        margin-top: 5px;\n        margin-bottom: 10px;\n      }\n      \n      .server-help {\n        font-size: 0.8rem;\n        opacity: 0.8;\n        margin: 5px 0;\n      }\n      \n      .mp-small-btn {\n        padding: 5px 10px;\n        font-size: 0.9rem;\n        margin-top: 5px;\n      }\n      \n      .mp-btn {\n        padding: 0.8rem;\n        border: none;\n        border-radius: 5px;\n        background: #313244;\n        color: #cdd6f4;\n        cursor: pointer;\n        transition: all 0.3s ease;\n      }\n      \n      .mp-btn:hover {\n        background: #45475a;\n      }\n      \n      .mp-btn.mp-cancel-btn {\n        background: #f38ba8;\n        color: #1e1e2e;\n        margin-top: 1rem;\n      }\n      \n      .mp-btn.mp-cancel-btn:hover {\n        background: #f5c2e7;\n      }\n      \n      .mp-divider {\n        text-align: center;\n        margin: 0.5rem 0;\n        opacity: 0.7;\n      }\n      \n      .mp-status {\n        margin-top: 1rem;\n        padding: 0.8rem;\n        background: #181825;\n        border-radius: 5px;\n        text-align: center;\n      }\n      \n      input, select {\n        padding: 0.8rem;\n        border: none;\n        border-radius: 5px;\n        background: #181825;\n        color: #cdd6f4;\n      }\n      \n      .room-code-display {\n        margin-top: 1rem;\n        font-size: 1.5rem;\n        text-align: center;\n        background: #313244;\n        padding: 1rem;\n        border-radius: 5px;\n        letter-spacing: 2px;\n      }\n      \n      .square.disabled {\n        cursor: not-allowed;\n        opacity: 0.8;\n      }\n      \n      .mp-status.error {\n        background: #f38ba8;\n        color: #1e1e2e;\n      }\n    ",document.head.appendChild(c)}}function p(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=document.getElementById("mp-status");o&&(o.textContent=e,o.className=n?"mp-status error":"mp-status")}function u(e){p(e,!0),setTimeout((function(){p("Please try again",!1)}),5e3)}function g(){t.socket&&(t.socket.disconnect(),t.socket=null),t.roomId=null,t.playerId=null,t.isHost=!1,t.playerColor=null,t.opponentConnected=!1,t.waitingForOpponent=!1,t.gameStarted=!1,t.onlineModeActive=!1,hideMultiplayerUI(),d(),updateGameStatus()}window.MP=t,window.initMultiplayer=function(){try{console.log("Initializing multiplayer mode..."),window.sendMove=l,console.log("Exposed sendMove function globally");var e=document.createElement("script");return e.src="https://cdn.socket.io/4.6.0/socket.io.min.js",e.crossOrigin="anonymous",e.onload=function(){console.log("Socket.io library loaded"),r()},e.onerror=function(e){console.error("Error loading Socket.io:",e),u("Failed to load multiplayer functionality")},document.head.appendChild(e),m(),!0}catch(e){return console.error("Failed to initialize multiplayer:",e),u("Failed to initialize multiplayer mode"),!1}},window.leaveMultiplayerMode=g,window.sendMove=l})();
//# sourceMappingURL=multiplayer.a9b896dd4726a0719226.js.map