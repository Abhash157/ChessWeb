{"version":3,"file":"js/multiplayer.a9b896dd4726a0719226.js","mappings":"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","sources":["webpack://chessweb/./js/multiplayer.js"],"sourcesContent":["/**\n * Multiplayer Chess Module\n * Handles online gameplay using Socket.io\n */\n\n// Socket.io server URL - can be overridden by custom settings\nconst DEFAULT_SOCKET_SERVER_URL = 'http://localhost:3000';\n\n// Function to get the current server URL (custom or default)\nfunction getServerUrl() {\n  return localStorage.getItem('chessServerUrl') || DEFAULT_SOCKET_SERVER_URL;\n}\n\n// Multiplayer State\nconst MP = {\n  socket: null,\n  roomId: null,\n  playerId: null,\n  isHost: false,\n  playerColor: null,\n  opponentConnected: false,\n  waitingForOpponent: false,\n  gameStarted: false,\n  lastReceivedMove: null,\n  playerName: 'Player',\n  opponentName: 'Opponent',\n  onlineModeActive: false\n};\n\n/**\n * Initialize the multiplayer module\n * @returns {boolean} True if initialization successful\n */\nfunction initMultiplayer() {\n  try {\n    console.log('Initializing multiplayer mode...');\n    \n    // Make multiplayer functions globally available to script.js\n    window.sendMove = sendMove;\n    console.log('Exposed sendMove function globally');\n    \n    // Load Socket.io library dynamically\n    const script = document.createElement('script');\n    script.src = 'https://cdn.socket.io/4.6.0/socket.io.min.js';\n    script.crossOrigin = 'anonymous';\n    \n    script.onload = () => {\n      console.log('Socket.io library loaded');\n      connectToServer();\n    };\n    \n    script.onerror = (error) => {\n      console.error('Error loading Socket.io:', error);\n      showConnectionError('Failed to load multiplayer functionality');\n    };\n    \n    document.head.appendChild(script);\n    \n    // Show multiplayer UI once Socket.io is loaded\n    showMultiplayerUI();\n    return true;\n  } catch (error) {\n    console.error('Failed to initialize multiplayer:', error);\n    showConnectionError('Failed to initialize multiplayer mode');\n    return false;\n  }\n}\n\n/**\n * Connect to the WebSocket server\n * @param {string} customServerUrl - Optional custom server URL\n */\nfunction connectToServer(customServerUrl) {\n  try {\n    // Allow custom server URL or use stored preference, fallback to default\n    let serverUrl = customServerUrl || getServerUrl();\n    \n    console.log(`Connecting to WebSocket server at ${serverUrl}...`);\n    updateMultiplayerStatus(`Connecting to server at ${serverUrl}...`);\n    \n    // Store the server URL for future use\n    if (customServerUrl) {\n      localStorage.setItem('chessServerUrl', customServerUrl);\n    }\n    \n    MP.socket = io(serverUrl, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      timeout: 20000, // Increased timeout\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000\n    });\n    \n    // Set up connection event handlers\n    setupSocketListeners();\n    \n    return true;\n  } catch (error) {\n    console.error('Error connecting to server:', error);\n    showConnectionError(`Failed to connect to multiplayer server: ${error.message}`);\n    return false;\n  }\n}\n\n/**\n * Set up Socket.IO event listeners\n */\nfunction setupSocketListeners() {\n  if (!MP.socket) return;\n  \n  // Connection events\n  MP.socket.on('connect', () => {\n    console.log('Connected to Socket.IO server with ID:', MP.socket.id);\n    MP.playerId = MP.socket.id;\n    MP.onlineModeActive = true;\n  });\n  \n  MP.socket.on('disconnect', () => {\n    console.log('Disconnected from Socket.IO server');\n    showConnectionError('Disconnected from server');\n  });\n  \n  MP.socket.on('connect_error', (error) => {\n    console.error('Socket connection error:', error);\n    showConnectionError('Connection error: ' + error.message);\n    \n    // Add a fallback option for users experiencing connection issues\n    const mpStatus = document.getElementById('mp-status');\n    if (mpStatus) {\n      mpStatus.innerHTML += `\n        <div class=\"warning-message\" style=\"margin-top: 15px;\">\n          <p>Having trouble connecting? Your browser might be blocking WebSockets.</p>\n          <p>You can:</p>\n          <ul style=\"text-align: left; margin-left: 20px;\">\n            <li>Check your server address in Server Settings</li>\n            <li>Make sure both devices are on the same network</li>\n            <li>Disable ad blockers for this page</li>\n            <li>Try a different browser</li>\n            <li>Use the local multiplayer option below</li>\n          </ul>\n          <button id=\"mp-local-fallback\" class=\"mp-btn\">Use Local Multiplayer</button>\n        </div>\n      `;\n      \n      // Add event listener for the local fallback button\n      document.getElementById('mp-local-fallback').addEventListener('click', () => {\n        useLocalMultiplayerFallback();\n      });\n    }\n  });\n  \n  // Game events\n  MP.socket.on('opponent_joined', (data) => {\n    console.log('Opponent joined:', data);\n    handleOpponentJoined(data);\n  });\n  \n  /**\n   * Switch to local multiplayer fallback when Socket.IO connection fails\n   */\n  window.useLocalMultiplayerFallback = function() {\n    console.log('Switching to local multiplayer fallback');\n    \n    // Clean up socket connection if it exists\n    if (MP.socket) {\n      MP.socket.disconnect();\n      MP.socket = null;\n    }\n    \n    // Reset multiplayer state\n    MP.roomId = null;\n    MP.playerId = null;\n    MP.isHost = false;\n    MP.playerColor = null;\n    MP.opponentConnected = false;\n    MP.waitingForOpponent = false;\n    MP.gameStarted = false;\n    MP.onlineModeActive = false;\n    \n    // Load the local multiplayer script if not already loaded\n    if (!window.LMP) {\n      const script = document.createElement('script');\n      script.src = 'js/localMultiplayer.js';\n      script.onload = () => {\n        console.log('Local multiplayer script loaded');\n        initLocalMultiplayer();\n      };\n      script.onerror = (error) => {\n        console.error('Error loading local multiplayer script:', error);\n        showConnectionError('Failed to load local multiplayer functionality');\n      };\n      document.head.appendChild(script);\n    } else {\n      // If script is already loaded, just initialize\n      initLocalMultiplayer();\n    }\n  };\n  \n  // Listen for opponent's move\n  MP.socket.on('opponent_move', (move) => {\n    console.log('Received opponent_move event from server:', move);\n    \n    // Make sure game is marked as started - may be redundant but provides a safeguard\n    if (!MP.gameStarted) {\n      console.log('Game not marked as started, but move received - forcing game start');\n      MP.gameStarted = true;\n      MP.onlineModeActive = true;\n      \n      // Set game mode to online\n      window.currentGameMode = window.GAME_MODE ? window.GAME_MODE.ONLINE : 'online';\n      console.log('Forced game mode to:', window.currentGameMode);\n      \n      // Initialize the board if needed\n      if (document.querySelectorAll('#chessboard .square').length === 0) {\n        console.log('Board not initialized, initializing now');\n        resetBoard();\n      }\n    }\n    \n    // Process the move\n    handleOpponentMove(move);\n  });\n  \n  MP.socket.on('opponent_disconnected', (data) => {\n    console.log('Opponent disconnected:', data);\n    showConnectionError(data.message || 'Opponent disconnected');\n    \n    // Reset game state\n    MP.opponentConnected = false;\n    MP.gameStarted = false;\n    \n    // Show a reconnect button\n    const mpStatus = document.getElementById('mp-status');\n    if (mpStatus) {\n      mpStatus.innerHTML = `\n        <div class=\"error-message\">${data.message || 'Opponent disconnected'}</div>\n        <button id=\"mp-reconnect-btn\" class=\"mp-btn\">Return to Menu</button>\n      `;\n      \n      // Add event listener to reconnect button\n      document.getElementById('mp-reconnect-btn').addEventListener('click', () => {\n        leaveMultiplayerMode();\n        showMultiplayerUI();\n      });\n    }\n  });\n}\n\n/**\n * Create a new game room and wait for opponent\n */\nfunction createRoom() {\n  if (!MP.socket || !MP.socket.connected) {\n    showConnectionError('Not connected to server');\n    return;\n  }\n  \n  // Send request to create a new room\n  MP.socket.emit('create_room', { playerName: MP.playerName }, (response) => {\n    if (response.success) {\n      console.log(`Room created with ID: ${response.roomId}`);\n      MP.roomId = response.roomId;\n      MP.isHost = true;\n      MP.playerColor = PLAYER.WHITE; // Host plays as white\n      MP.waitingForOpponent = true;\n      \n      // Update UI to show waiting status\n      updateMultiplayerStatus(`Waiting for opponent... Room Code: ${MP.roomId}`);\n      showRoomCodeDisplay(MP.roomId);\n    } else {\n      showConnectionError('Failed to create room: ' + (response.error || 'Unknown error'));\n    }\n  });\n}\n\n/**\n * Join an existing game room\n * @param {string} roomId - The ID of the room to join\n */\nfunction joinRoom(roomId) {\n  if (!MP.socket || !MP.socket.connected) {\n    showConnectionError('Not connected to server');\n    return;\n  }\n  \n  if (!roomId) {\n    showConnectionError('Please enter a valid room code');\n    return;\n  }\n  \n  // Send request to join the room\n  MP.socket.emit('join_room', { roomId, playerName: MP.playerName }, (response) => {\n    if (response.success) {\n      console.log(`Joined room: ${roomId}`);\n      MP.roomId = roomId;\n      MP.isHost = false;\n      MP.playerColor = PLAYER.BLACK; // Joiner plays as black\n      MP.opponentName = response.hostName || 'Host';\n      MP.opponentConnected = true;\n      \n      // CRITICAL: Set game to started state immediately\n      MP.gameStarted = true;\n      MP.onlineModeActive = true;\n      \n      // Set game mode to online \n      if (window.GAME_MODE && typeof window.GAME_MODE.ONLINE !== 'undefined') {\n        console.log('Setting game mode to ONLINE for joiner');\n        window.currentGameMode = window.GAME_MODE.ONLINE;\n      } else {\n        console.log('Setting game mode to \"online\" string for joiner');\n        window.currentGameMode = 'online';\n      }\n      \n      // Update UI to show connection status\n      updateMultiplayerStatus(`Connected to ${MP.opponentName}'s game! You are playing as Black`);\n      \n      // Hide the multiplayer overlay immediately\n      const mpOverlay = document.getElementById('mp-overlay');\n      if (mpOverlay) {\n        mpOverlay.style.display = 'none';\n      }\n      \n      // Initialize the game board\n      console.log('Initializing game board for joiner');\n      resetBoard();\n      \n      // Disable board interaction since White goes first\n      disableBoardInteraction();\n    } else {\n      showConnectionError('Failed to join room: ' + (response.error || 'Unknown error'));\n    }\n  });\n}\n\n/**\n * Send a move to the opponent\n * @param {Object} moveData - Data about the move\n */\nfunction sendMove(moveData) {\n  if (!MP.roomId || !MP.gameStarted || !MP.socket) {\n    console.error('Cannot send move: multiplayer not ready', {\n      roomId: MP.roomId,\n      gameStarted: MP.gameStarted,\n      socketConnected: MP.socket ? MP.socket.connected : false\n    });\n    return;\n  }\n  \n  console.log('Sending move to opponent:', moveData);\n  \n  // Create a simple move format: piece,fromRow,fromCol,toRow,toCol\n  const { from, to, piece } = moveData;\n  const fromRow = from.row;\n  const fromCol = from.col;\n  const toRow = to.row;\n  const toCol = to.col;\n  \n  // Create a simple move string that's easy to parse\n  const moveString = `${piece},${fromRow},${fromCol},${toRow},${toCol}`;\n  \n  // Send the move to the server\n  MP.socket.emit('make_move', {\n    roomId: MP.roomId,\n    move: moveString\n  });\n  \n  console.log(`Move sent to server: ${moveString}`);\n  \n  // Update local turn status - switch to opponent's turn\n  window.turn = MP.playerColor === PLAYER.WHITE ? PLAYER.BLACK : PLAYER.WHITE;\n  disableBoardInteraction(); // Disable board until opponent moves\n  \n  // Update UI to show waiting for opponent\n  updateMultiplayerStatus(`Waiting for ${MP.opponentName} to make a move...`);\n}\n\n/**\n * Handle opponent joining our room\n * @param {Object} data - Data about the opponent\n */\nfunction handleOpponentJoined(data) {\n  MP.opponentConnected = true;\n  MP.waitingForOpponent = false;\n  MP.opponentName = data.name || 'Opponent';\n  \n  console.log('Opponent joined:', data);\n  updateMultiplayerStatus(`${MP.opponentName} has joined the game!`);\n  \n  // Hide the multiplayer overlay immediately for the host\n  const mpOverlay = document.getElementById('mp-overlay');\n  if (mpOverlay) {\n    mpOverlay.style.display = 'none';\n  }\n  \n  // Start the game after a short delay\n  setTimeout(startMultiplayerGame, 1500);\n}\n\n/**\n * Handle joining another player's room\n * @param {Object} data - Data about the host\n */\nfunction handleRoomJoined(data) {\n  MP.opponentConnected = true;\n  MP.opponentName = data.hostName || 'Host';\n  \n  console.log('Joined host\\'s room:', data);\n  updateMultiplayerStatus(`Connected to ${MP.opponentName}'s game!`);\n  \n  // Start the game after a short delay\n  setTimeout(startMultiplayerGame, 1500);\n}\n\n/**\n * Handle receiving a move from the opponent\n * @param {string} moveString - Move in format 'piece,fromRow,fromCol,toRow,toCol'\n */\nfunction handleOpponentMove(moveString) {\n  if (!MP.gameStarted) {\n    console.error('Received opponent move but game not started!');\n    return;\n  }\n  \n  console.log('Received move from opponent:', moveString);\n  \n  try {\n    // Parse the move string\n    const [piece, fromRow, fromCol, toRow, toCol] = moveString.split(',');\n    \n    // Convert to numbers\n    const moveData = {\n      piece: piece,\n      from: { row: parseInt(fromRow), col: parseInt(fromCol) },\n      to: { row: parseInt(toRow), col: parseInt(toCol) }\n    };\n    \n    console.log('Parsed opponent move:', moveData);\n    \n    // Save the move for reference\n    MP.lastReceivedMove = moveData;\n    \n    // Get the chessboard\n    const board = document.getElementById('chessboard');\n    if (!board) {\n      console.error('Chessboard not found in DOM');\n      return;\n    }\n    \n    // Get the squares from the DOM\n    const fromSquare = board.querySelector(`.square[data-row=\"${fromRow}\"][data-col=\"${fromCol}\"]`);\n    const toSquare = board.querySelector(`.square[data-row=\"${toRow}\"][data-col=\"${toCol}\"]`);\n    \n    console.log('Opponent move squares:', {\n      from: fromSquare,\n      to: toSquare,\n      fromCoords: `${fromRow},${fromCol}`,\n      toCoords: `${toRow},${toCol}`\n    });\n    \n    if (!fromSquare || !toSquare) {\n      console.error('Could not find squares for opponent move:', {\n        fromRow, fromCol, toRow, toCol,\n        fromSquare, toSquare\n      });\n      return;\n    }\n    \n    // Apply the opponent's move to the local board\n    const opponentColor = MP.playerColor === PLAYER.WHITE ? PLAYER.BLACK : PLAYER.WHITE;\n    console.log(`Applying opponent move directly with color: ${opponentColor}`);\n    \n    // Disable board interaction while move is processing\n    disableBoardInteraction();\n    \n    // Use the global handlePieceMove function\n    window.handlePieceMove(fromSquare, toSquare, opponentColor)\n      .then(() => {\n        console.log('Opponent move applied successfully!');\n        \n        // Update turn status to player's turn\n        window.turn = MP.playerColor;\n        \n        // Enable interaction so the player can make their move\n        enableBoardInteraction();\n        \n        // Update UI\n        updateMultiplayerStatus(`Your turn`);\n      })\n      .catch(err => {\n        console.error('Error executing opponent move:', err);\n        alert('Error applying opponent move. Please try reloading the page.');\n      });\n  } catch (e) {\n    console.error('Error processing opponent move:', e);\n  }\n}\n\n/**\n * Apply a move received from the opponent to the local board\n * @param {Object} moveData - Data about the move in simplified format\n */\nfunction applyOpponentMove(moveData) {\n  console.log('Applying opponent move:', moveData);\n  \n  try {\n    // Extract move data - ensure they're numbers with parseInt\n    const fromRow = parseInt(moveData.from.row);\n    const fromCol = parseInt(moveData.from.col);\n    const toRow = parseInt(moveData.to.row);\n    const toCol = parseInt(moveData.to.col);\n    \n    // Get the current state\n    const state = getState();\n    const squares = state.squares;\n    \n    // Get the corresponding squares using the correct indices\n    const fromIndex = fromRow * 8 + fromCol;\n    const toIndex = toRow * 8 + toCol;\n    const fromSquare = squares[fromIndex];\n    const toSquare = squares[toIndex];\n    \n    console.log(`Move indexes: from=${fromIndex} (${fromRow},${fromCol}), to=${toIndex} (${toRow},${toCol})`);\n    console.log('From square:', fromSquare);\n    console.log('To square:', toSquare);\n    \n    if (!fromSquare || !toSquare) {\n      console.error('Invalid squares for move:', fromRow, fromCol, toRow, toCol);\n      return;\n    }\n    \n    // Determine the opponent's color (opposite of player's color)\n    const opponentColor = MP.playerColor === PLAYER.WHITE ? PLAYER.BLACK : PLAYER.WHITE;\n    \n    console.log(`Applying opponent move from (${fromRow},${fromCol}) to (${toRow},${toCol})`);\n    console.log(`Opponent color: ${opponentColor}`);\n    \n    // Disable board interaction while opponent's move is being processed\n    disableBoardInteraction();\n    \n    // Call the global handlePieceMove function with the correct parameters\n    // Make sure to pass the correct color of the piece being moved (opponent's color)\n    window.handlePieceMove(fromSquare, toSquare, opponentColor)\n      .then(() => {\n        console.log('Opponent move applied successfully');\n        \n        // Make sure the turn is set to the player's color after the move completes\n        window.turn = MP.playerColor;\n        \n        // Enable board interaction after the move is completed\n        enableBoardInteraction();\n        \n        // Update UI to show it's the player's turn\n        updateMultiplayerStatus('Your turn');\n      })\n      .catch(err => {\n        console.error('Error during handlePieceMove execution:', err);\n        showConnectionError('Error applying opponent move');\n        enableBoardInteraction(); // Ensure board isn't left disabled\n      });\n    \n    console.log('Opponent move processing initiated');\n  } catch (err) {\n    console.error('Error in applyOpponentMove function:', err);\n    showConnectionError('Failed to process opponent move');\n    enableBoardInteraction(); // Ensure board isn't left disabled\n  }\n}\n\n/**\n{{ ... }}\n * Get the promotion piece based on the selected piece type\n * @param {string} pieceType - The type of piece to promote to\n * @param {number} playerColor - The color of the player\n * @returns {string} The Unicode character for the promoted piece\n */\nfunction getPromotionPiece(pieceType, playerColor) {\n  const pieceSet = playerColor === PLAYER.WHITE ? pieces.white : pieces.black;\n  \n  switch(pieceType) {\n    case 'queen': return pieceSet.queen;\n    case 'rook': return pieceSet.rook;\n    case 'bishop': return pieceSet.bishop;\n    case 'knight': return pieceSet.knight;\n    default: return pieceSet.queen; // Default to queen\n  }\n}\n\n/**\n * Start the multiplayer game\n */\nfunction startMultiplayerGame() {\n  console.log('Starting multiplayer game...');\n  \n  // Important: Make sure handlePieceMove is available globally\n  if (typeof handlePieceMove !== 'function') {\n    window.handlePieceMove = window.handlePieceMove || function(fromSquare, toSquare, playerColor) {\n      console.log('Using fallback handlePieceMove');\n      // Fallback implementation\n      const piece = fromSquare.textContent;\n      fromSquare.textContent = '';\n      toSquare.textContent = piece;\n      return true;\n    };\n  }\n  MP.gameStarted = true;\n  MP.onlineModeActive = true;\n  \n  // Force hide the multiplayer overlay with !important to override any other styles\n  const mpOverlay = document.getElementById('mp-overlay');\n  if (mpOverlay) {\n    console.log('Hiding multiplayer overlay');\n    mpOverlay.style.cssText = 'display: none !important';\n    \n    // Also try to remove it from the DOM if hiding doesn't work\n    setTimeout(() => {\n      if (mpOverlay.style.display !== 'none' || mpOverlay.offsetParent !== null) {\n        console.log('Overlay still visible, removing from DOM');\n        mpOverlay.parentNode.removeChild(mpOverlay);\n      }\n    }, 100);  \n  } else {\n    console.log('No mpOverlay found to hide');\n  }\n  \n  // Show a game status indicator\n  const gameInfo = document.querySelector('.game-info');\n  if (gameInfo) {\n    const mpStatus = document.createElement('div');\n    mpStatus.id = 'in-game-mp-status';\n    mpStatus.className = 'mp-game-status';\n    mpStatus.innerHTML = `<span>Online Match vs ${MP.opponentName}</span>`;\n    gameInfo.prepend(mpStatus);\n  }\n  \n  // Set game mode to online - using multiple approaches to ensure it's set\n  window.currentGameMode = window.GAME_MODE.ONLINE;\n  if (window.GAME_MODE && typeof window.GAME_MODE.ONLINE !== 'undefined') {\n    console.log('Setting game mode to ONLINE using window.GAME_MODE');\n    window.currentGameMode = window.GAME_MODE.ONLINE;\n  } else {\n    console.log('Setting game mode to \"online\" as string fallback');\n    window.currentGameMode = 'online';\n  }\n  console.log('Current game mode set to:', window.currentGameMode);\n  \n  // Update UI\n  updateMultiplayerStatus(`Game started! You are playing as ${MP.playerColor === PLAYER.WHITE ? 'White' : 'Black'}`);\n  \n  // Reset board and set up for a new game\n  resetBoard();\n  resetClock();\n  \n  // Start the clock\n  startClock();\n  \n  // If player is black, disable board interaction until white moves\n  if (MP.playerColor === PLAYER.BLACK) {\n    disableBoardInteraction();\n    updateMultiplayerStatus(`Waiting for ${MP.opponentName} to make a move...`);\n  } else {\n    enableBoardInteraction();\n  }\n  \n  // Add some CSS styles for the in-game multiplayer status\n  if (!document.getElementById('mp-game-styles')) {\n    const styles = document.createElement('style');\n    styles.id = 'mp-game-styles';\n    styles.textContent = `\n      .mp-game-status {\n        background-color: #3498db;\n        color: white;\n        padding: 8px 12px;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        font-weight: bold;\n        text-align: center;\n      }\n      \n      /* Ensure overlay is hidden */\n      #mp-overlay {\n        display: none !important;\n      }\n    `;\n    document.head.appendChild(styles);\n  }\n  \n  // Dispatch an event to signal that the game has started\n  const gameStartEvent = new CustomEvent('chess_game_started', {\n    detail: {\n      roomId: MP.roomId,\n      playerColor: MP.playerColor\n    }\n  });\n  window.dispatchEvent(gameStartEvent);\n  \n  // Store in localStorage that the game has started\n  localStorage.setItem(`chessGameStarted_${MP.roomId}`, JSON.stringify({\n    timestamp: new Date().getTime(),\n    hostId: MP.isHost ? MP.playerId : null,\n    joinerId: !MP.isHost ? MP.playerId : null\n  }));\n  \n  console.log('Multiplayer game started successfully!');\n}\n\n/**\n * Enable interaction with the chess board\n */\nfunction enableBoardInteraction() {\n  // This might not be needed if your board is already interactive by default\n  document.querySelectorAll('.square').forEach(square => {\n    square.classList.remove('disabled');\n  });\n}\n\n/**\n * Disable interaction with the chess board\n */\nfunction disableBoardInteraction() {\n  // Visual indication that the board is not interactive\n  document.querySelectorAll('.square').forEach(square => {\n    square.classList.add('disabled');\n  });\n}\n\n/**\n * Reset the chess board for a new game\n */\nfunction resetBoard() {\n  // You may already have a function to reset the board\n  // If not, recreate the board and place pieces in starting positions\n  if (typeof createChessboard === 'function') {\n    createChessboard();\n    placePieces();\n  }\n  \n  // Reset game state\n  window.turn = PLAYER.WHITE;\n  gameState.gameOver = false;\n  gameState.check = false;\n  gameState.checkmate = false;\n  gameState.moveHistory = [];\n  gameState.capturedPieces = { white: [], black: [] };\n  gameState.moveCount = 1;\n  \n  // Update UI elements\n  updateGameStatus();\n  updateCapturedPieces();\n  updateMoveHistory();\n  \n  // Clear any selected squares\n  if (selectedSquare) {\n    selectedSquare.classList.remove('selected');\n    selectedSquare = null;\n  }\n}\n\n/**\n * Show multiplayer UI elements\n */\nfunction showMultiplayerUI() {\n  // Create multiplayer overlay if it doesn't exist\n  let mpOverlay = document.getElementById('mp-overlay');\n  \n  if (!mpOverlay) {\n    mpOverlay = document.createElement('div');\n    mpOverlay.id = 'mp-overlay';\n    mpOverlay.className = 'mp-overlay';\n    \n    // Create content for the overlay\n    mpOverlay.innerHTML = `\n      <div class=\"mp-container\">\n        <h2>Online Multiplayer</h2>\n        <div class=\"mp-options\">\n          <div class=\"mp-option-group\">\n            <label for=\"player-name\">Your Name:</label>\n            <input type=\"text\" id=\"player-name\" value=\"Player\" maxlength=\"15\">\n          </div>\n          <div class=\"mp-option-group\">\n            <details class=\"server-config\">\n              <summary>Server Settings</summary>\n              <div class=\"server-settings-content\">\n                <label for=\"server-address\">Server Address:</label>\n                <input type=\"text\" id=\"server-address\" placeholder=\"e.g., http://192.168.1.5:3000\">\n                <p class=\"server-help\">Enter the network URL shown in your server console</p>\n                <button id=\"save-server-btn\" class=\"mp-btn mp-small-btn\">Save Server</button>\n              </div>\n            </details>\n          </div>\n          <button id=\"create-room-btn\" class=\"mp-btn\">Create New Game</button>\n          <div class=\"mp-divider\">OR</div>\n          <div class=\"mp-option-group\">\n            <label for=\"room-code\">Room Code:</label>\n            <input type=\"text\" id=\"room-code\" placeholder=\"Enter room code\" maxlength=\"10\">\n          </div>\n          <button id=\"join-room-btn\" class=\"mp-btn\">Join Game</button>\n        </div>\n        <div id=\"mp-status\" class=\"mp-status\">Connect to play online</div>\n        <div id=\"room-code-display\" class=\"room-code-display\" style=\"display: none;\"></div>\n        <button id=\"mp-cancel-btn\" class=\"mp-btn mp-cancel-btn\">Cancel</button>\n      </div>\n    `;\n    \n    document.body.appendChild(mpOverlay);\n    \n    // Add event listeners for the multiplayer UI\n    document.getElementById('player-name').addEventListener('input', (e) => {\n      MP.playerName = e.target.value || 'Player';\n    });\n    \n    document.getElementById('create-room-btn').addEventListener('click', () => {\n      createRoom();\n    });\n    \n    document.getElementById('join-room-btn').addEventListener('click', () => {\n      const roomCode = document.getElementById('room-code').value;\n      joinRoom(roomCode);\n    });\n    \n    document.getElementById('mp-cancel-btn').addEventListener('click', () => {\n      // Clean up and return to main game\n      leaveMultiplayerMode();\n    });\n    \n    // Initialize server address input with stored value if available\n    const serverAddressInput = document.getElementById('server-address');\n    const savedServerUrl = getServerUrl();\n    serverAddressInput.value = savedServerUrl;\n    \n    // Also display the current server in the status\n    updateMultiplayerStatus(`Ready to connect to server at ${savedServerUrl}`);\n    \n    // Add event listener for save server button\n    document.getElementById('save-server-btn').addEventListener('click', () => {\n      const serverUrl = serverAddressInput.value.trim();\n      if (serverUrl) {\n        // Validate URL format\n        try {\n          // Simple validation - just check if it has http/https and a domain\n          if (!serverUrl.match(/^https?:\\/\\/.+/)) {\n            throw new Error('Invalid URL format');\n          }\n          \n          // Save the server URL to localStorage\n          localStorage.setItem('chessServerUrl', serverUrl);\n          \n          // Reconnect to new server\n          if (MP.socket) {\n            MP.socket.disconnect();\n          }\n          \n          // Show status message\n          updateMultiplayerStatus(`Connecting to server at ${serverUrl}...`);\n          \n          // Connect to the new server\n          setTimeout(() => {\n            connectToServer(serverUrl);\n          }, 500);\n          \n        } catch (error) {\n          updateMultiplayerStatus(`Error: ${error.message}. Use format http://IP:PORT`);\n        }\n      }\n    });\n  } else {\n    mpOverlay.style.display = 'flex';\n  }\n  \n  // Add styles if not already present\n  if (!document.getElementById('mp-styles')) {\n    const styles = document.createElement('style');\n    styles.id = 'mp-styles';\n    styles.textContent = `\n      .mp-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n      }\n      \n      .mp-container {\n        background: #1e1e2e;\n        border-radius: 10px;\n        padding: 2rem;\n        width: 90%;\n        max-width: 400px;\n        color: #cdd6f4;\n      }\n      \n      .mp-options {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        margin: 1.5rem 0;\n      }\n      \n      .mp-option-group {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n      }\n      \n      .server-config summary {\n        cursor: pointer;\n        padding: 8px;\n        background: #313244;\n        border-radius: 5px;\n        margin-bottom: 10px;\n      }\n      \n      .server-settings-content {\n        padding: 10px;\n        background: #11111b;\n        border-radius: 5px;\n        margin-top: 5px;\n        margin-bottom: 10px;\n      }\n      \n      .server-help {\n        font-size: 0.8rem;\n        opacity: 0.8;\n        margin: 5px 0;\n      }\n      \n      .mp-small-btn {\n        padding: 5px 10px;\n        font-size: 0.9rem;\n        margin-top: 5px;\n      }\n      \n      .mp-btn {\n        padding: 0.8rem;\n        border: none;\n        border-radius: 5px;\n        background: #313244;\n        color: #cdd6f4;\n        cursor: pointer;\n        transition: all 0.3s ease;\n      }\n      \n      .mp-btn:hover {\n        background: #45475a;\n      }\n      \n      .mp-btn.mp-cancel-btn {\n        background: #f38ba8;\n        color: #1e1e2e;\n        margin-top: 1rem;\n      }\n      \n      .mp-btn.mp-cancel-btn:hover {\n        background: #f5c2e7;\n      }\n      \n      .mp-divider {\n        text-align: center;\n        margin: 0.5rem 0;\n        opacity: 0.7;\n      }\n      \n      .mp-status {\n        margin-top: 1rem;\n        padding: 0.8rem;\n        background: #181825;\n        border-radius: 5px;\n        text-align: center;\n      }\n      \n      input, select {\n        padding: 0.8rem;\n        border: none;\n        border-radius: 5px;\n        background: #181825;\n        color: #cdd6f4;\n      }\n      \n      .room-code-display {\n        margin-top: 1rem;\n        font-size: 1.5rem;\n        text-align: center;\n        background: #313244;\n        padding: 1rem;\n        border-radius: 5px;\n        letter-spacing: 2px;\n      }\n      \n      .square.disabled {\n        cursor: not-allowed;\n        opacity: 0.8;\n      }\n      \n      .mp-status.error {\n        background: #f38ba8;\n        color: #1e1e2e;\n      }\n    `;\n    document.head.appendChild(styles);\n  }\n}\n\n/**\n * Update the multiplayer status display\n * @param {string} message - Status message to display\n * @param {boolean} isError - Whether this is an error message\n */\nfunction updateMultiplayerStatus(message, isError = false) {\n  const statusEl = document.getElementById('mp-status');\n  if (statusEl) {\n    statusEl.textContent = message;\n    statusEl.className = isError ? 'mp-status error' : 'mp-status';\n  }\n}\n\n/**\n * Show error message in the multiplayer UI\n * @param {string} message - Error message to display\n */\nfunction showConnectionError(message) {\n  updateMultiplayerStatus(message, true);\n  \n  // Reset error after a delay\n  setTimeout(() => {\n    updateMultiplayerStatus('Please try again', false);\n  }, 5000);\n}\n\n/**\n * Display the room code for sharing\n * @param {string} roomId - The room ID to display\n */\nfunction showRoomCodeDisplay(roomId) {\n  const display = document.getElementById('room-code-display');\n  if (display) {\n    display.textContent = roomId;\n    display.style.display = 'block';\n  }\n}\n\n/**\n * Leave multiplayer mode\n */\nfunction leaveMultiplayerMode() {\n  if (MP.socket) {\n    // Properly disconnect from the server\n    MP.socket.disconnect();\n    MP.socket = null;\n  }\n  \n  // Reset all MP state\n  MP.roomId = null;\n  MP.playerId = null;\n  MP.isHost = false;\n  MP.playerColor = null;\n  MP.opponentConnected = false;\n  MP.waitingForOpponent = false;\n  MP.gameStarted = false;\n  MP.onlineModeActive = false;\n  \n  // Hide multiplayer UI\n  hideMultiplayerUI();\n  \n  // Reset board\n  resetBoard();\n  \n  // Update game status\n  updateGameStatus();\n}\n\n// Make functions available to other modules\nwindow.MP = MP;\nwindow.initMultiplayer = initMultiplayer;\nwindow.leaveMultiplayerMode = leaveMultiplayerMode;\nwindow.sendMove = sendMove; "],"names":["getServerUrl","localStorage","getItem","MP","socket","roomId","playerId","isHost","playerColor","opponentConnected","waitingForOpponent","gameStarted","lastReceivedMove","playerName","opponentName","onlineModeActive","connectToServer","customServerUrl","serverUrl","console","log","concat","updateMultiplayerStatus","setItem","io","transports","reconnectionAttempts","timeout","reconnectionDelay","reconnectionDelayMax","on","id","showConnectionError","error","message","mpStatus","document","getElementById","innerHTML","addEventListener","useLocalMultiplayerFallback","data","name","mpOverlay","style","display","setTimeout","startMultiplayerGame","handleOpponentJoined","window","disconnect","LMP","initLocalMultiplayer","script","createElement","src","onload","onerror","head","appendChild","move","currentGameMode","GAME_MODE","ONLINE","querySelectorAll","length","resetBoard","moveString","_moveString$split2","_slicedToArray","split","piece","fromRow","fromCol","toRow","toCol","moveData","from","row","parseInt","col","to","board","fromSquare","querySelector","toSquare","fromCoords","toCoords","opponentColor","PLAYER","WHITE","BLACK","disableBoardInteraction","handlePieceMove","then","turn","enableBoardInteraction","err","alert","e","handleOpponentMove","leaveMultiplayerMode","showMultiplayerUI","setupSocketListeners","createRoom","connected","emit","response","success","textContent","sendMove","socketConnected","cssText","offsetParent","parentNode","removeChild","gameInfo","className","prepend","resetClock","startClock","styles","gameStartEvent","CustomEvent","detail","dispatchEvent","JSON","stringify","timestamp","Date","getTime","hostId","joinerId","forEach","square","classList","remove","add","createChessboard","placePieces","gameState","gameOver","check","checkmate","moveHistory","capturedPieces","white","black","moveCount","updateGameStatus","updateCapturedPieces","updateMoveHistory","selectedSquare","body","target","value","roomCode","hostName","serverAddressInput","savedServerUrl","trim","match","Error","isError","arguments","undefined","statusEl","hideMultiplayerUI","initMultiplayer","crossOrigin"],"sourceRoot":""}